name: Release and Build

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.version.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
        
    - name: Install svu (Semantic Version Util)
      run: |
        go install github.com/caarlos0/svu@latest
        
    - name: Get current version
      id: current_version
      run: |
        # Get the latest tag, if no tags exist, start with v0.0.0
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        echo "Current version: ${CURRENT_VERSION}"
        
    - name: Calculate next version
      id: version
      run: |
        # Use svu to calculate next version based on conventional commits
        NEXT_VERSION=$(svu next --strip-prefix)
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        
        # If versions are the same, no version bump needed
        if [ "v${NEXT_VERSION}" = "${CURRENT_VERSION}" ]; then
          echo "No version bump needed"
          echo "new_version=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "new_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
        echo "Next version: ${NEXT_VERSION}"
        
        # Generate changelog
        if [ "${CURRENT_VERSION}" = "v0.0.0" ]; then
          # For first release, get all commits
          CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
        else
          # For subsequent releases, get commits since last tag
          if git rev-parse "${CURRENT_VERSION}" >/dev/null 2>&1; then
            CHANGELOG=$(git log --pretty=format:"- %s" ${CURRENT_VERSION}..HEAD)
          else
            # Fallback if tag doesn't exist
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          fi
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "${CHANGELOG}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Update version in code
      if: steps.version.outputs.new_version != ''
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Update version in main.go
        sed -i "s/Version    = \"dev\"/Version    = \"${NEW_VERSION}\"/" main.go
        
        # Update CHANGELOG.md
        DATE=$(date +"%Y-%m-%d")
        CHANGELOG="${{ steps.version.outputs.changelog }}"
        
        # Create new changelog entry
        echo "## [${NEW_VERSION}] - ${DATE}" > temp_changelog.md
        echo "" >> temp_changelog.md
        echo "${CHANGELOG}" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        # Prepend to existing changelog
        if [ -f CHANGELOG.md ]; then
          cat CHANGELOG.md >> temp_changelog.md
        fi
        mv temp_changelog.md CHANGELOG.md
        
    - name: Commit version bump
      if: steps.version.outputs.new_version != ''
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add main.go CHANGELOG.md
        git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
        git push
        
    - name: Create and push tag
      if: steps.version.outputs.new_version != ''
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
        git push origin "v${NEW_VERSION}"

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: version-bump
    if: needs.version-bump.outputs.new_version != ''
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: macos-amd64
          - goos: darwin
            goarch: arm64
            suffix: macos-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        NEW_VERSION="${{ needs.version-bump.outputs.new_version }}"
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build with version information
        go build \
          -ldflags "-X main.Version=${NEW_VERSION} -X main.CommitHash=${COMMIT_HASH} -X main.BuildTime=${BUILD_TIME} -s -w" \
          -o gitcleaner-${{ matrix.suffix }} \
          .
          
    - name: Create archive
      run: |
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip gitcleaner-${{ matrix.suffix }}.zip gitcleaner-${{ matrix.suffix }}.exe
        else
          tar -czf gitcleaner-${{ matrix.suffix }}.tar.gz gitcleaner-${{ matrix.suffix }}
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitcleaner-${{ matrix.suffix }}
        path: |
          gitcleaner-${{ matrix.suffix }}*
          
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version-bump, build]
    if: needs.version-bump.outputs.new_version != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "gitcleaner-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
        
    - name: Extract changelog for this version
      id: changelog
      run: |
        NEW_VERSION="${{ needs.version-bump.outputs.new_version }}"
        
        # Extract changelog for this version from CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          # Find the section for this version and extract until the next version
          CHANGELOG_CONTENT=$(awk "/^## \[${NEW_VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
          
          if [ -n "$CHANGELOG_CONTENT" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release v${NEW_VERSION}" >> $GITHUB_OUTPUT
          fi
        else
          echo "changelog=Release v${NEW_VERSION}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.version-bump.outputs.new_version }}"
        name: "Release v${{ needs.version-bump.outputs.new_version }}"
        body: ${{ steps.changelog.outputs.changelog }}
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate checksums
      run: |
        # Generate checksums for the release assets
        cd release-assets
        sha256sum gitcleaner-* > gitcleaner-checksums.txt
        
    - name: Upload checksums
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.version-bump.outputs.new_version }}"
        files: release-assets/gitcleaner-checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
