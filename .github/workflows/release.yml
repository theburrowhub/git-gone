name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
    
    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build with version information
        go build \
          -ldflags "-X main.Version=${NEW_VERSION} -X main.CommitHash=${COMMIT_HASH} -X main.BuildTime=${BUILD_TIME} -s -w" \
          -o git-gone-${{ matrix.suffix }} \
          .
          
    - name: Create archive
      run: |
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip git-gone-${{ matrix.suffix }}.zip git-gone-${{ matrix.suffix }}.exe
        else
          tar -czf git-gone-${{ matrix.suffix }}.tar.gz git-gone-${{ matrix.suffix }}
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: git-gone-${{ matrix.suffix }}
        path: |
          git-gone-${{ matrix.suffix }}*
          
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: ./artifacts
    
    - name: Combine checksums
      run: |
        mkdir -p release-assets
        find ./artifacts -name "git-gone-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
        
    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        # Extract the current version's changelog
        CHANGELOG=$(awk -v ver="## \\[${VERSION#v}\\]" '
          $0 ~ ver { found=1; next }
          found && /^## \[/ { exit }
          found { print }
        ' CHANGELOG.md)
        
        # Save to file for release body
        echo "$CHANGELOG" > release_notes.md
        echo "Release ${{ steps.version.outputs.VERSION }}" >> release_notes.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: git-gone ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate checksums
      run: |
        # Generate checksums for the release assets
        cd release-assets
        sha256sum git-gone-* > git-gone-checksums.txt
        
    - name: Upload checksums
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.version-bump.outputs.new_version }}"
        files: release-assets/git-gone-checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}